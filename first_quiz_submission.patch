diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..770f62b 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -16,17 +16,23 @@
 def get_city_temperature(city):
    if city == "Quito":
       return 22
-   if city == "Sao Paulo":
+   elif city == "Sao Paulo":
       return 17
-   if city == "San Francisco":
+   elif city == "San Francisco":
       return 16
+   elif city == "New York":
+      return 14
 
 def get_city_weather(city):
 
   sky_condition = None
 
-  if city == "Sao Paulo":
+  if city == "Quito":
+     sky_condition = 'sunny'
+  elif city == "Sao Paulo":
      sky_condition = "cloudy"
+  elif city == "San Francisco":
+     sky_condition == 'snowy'
   elif city == "New York":
      sky_condition = "rainy"
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..bea348a 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -18,4 +18,6 @@
 swapper = None
 
 def run_swapper(list_of_tuples):
+  def swapper(tuple):
+    return tuple[1], tuple[0]
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..96ece3f 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,19 +26,53 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
+class MagicalOven:
+    def __init__(self):
+        self.ingredients = []
+        self.temperature = 0
+        self.result = None
+
+    def add(self, item):
+        self.ingredients.append(item)
+
+    def freeze(self):
+        if "water" in self.ingredients and "air" in self.ingredients:
+            self.result = "snow"
+            
+
+    def boil(self):
+        if "lead" in self.ingredients and "mercury" in self.ingredients:
+             self.result = "gold"
+        elif "cheese" in self.ingredients and "dough" in self.ingredients and "tomato" in self.ingredients:
+             self.result = "pizza"
+        
+
+    def wait(self):
+       self.result = "unknown"
+
+    def get_output(self):
+        return self.result
+
 def make_oven():
-  None
+    return MagicalOven()
 
 def alchemy_combine(oven, ingredients, temperature):
-  
-  for item in ingredients:
-    oven.add(item)
-
-  if temperature < 0:
-    oven.freeze()
-  elif temperature >= 100:
-    oven.boil()
-  else:
-    oven.wait()
-
-  return oven.get_output()
\ No newline at end of file
+    for item in ingredients:
+        oven.add(item)
+
+    if temperature < 0:
+        oven.freeze()
+        
+    elif temperature >= 100:
+        oven.boil()
+        
+    else:
+        oven.wait()
+    
+    return oven.get_output()
+
+results = alchemy_combine(
+    make_oven(),
+    ["cheese", "dough", "tomato"],
+    150)
+print(results)
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..c1018de 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import alchemy_combine, make_oven
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..2e9f6bf 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -23,9 +23,10 @@ import pets_db
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
 sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
+SELECT a.name, a.species, a.age
+FROM animals AS a
+LEFT JOIN people_animals AS pa ON a.animal_id = pa.pet_id
+WHERE pa.owner_id IS NULL;
 """
 
 # Part 4.B:
@@ -33,16 +34,27 @@ Your SQL here.
 # The output should be an integer.
 
 sql_pets_older_than_owner = """
-
-Your SQL here.
-
+SELECT COUNT(*) AS count
+FROM animals AS a
+INNER JOIN people_animals AS pa ON a.animal_id = pa.pet_id
+INNER JOIN people AS p ON pa.owner_id = p.person_id
+WHERE a.age > p.age;
 """
 
+
 # Part 4.C: BONUS CHALLENGE! 
 # Write SQL to select the pets that are owned by Bessie and nobody else.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
-sql_only_owned_by_bessie = """ 
-
-Your SQL here.
-
-"""
\ No newline at end of file
+sql_only_owned_by_bessie = """
+SELECT p.name AS owner_name, a.name AS pet_name, a.species
+FROM people AS p
+INNER JOIN people_animals AS pa ON p.person_id = pa.owner_id
+INNER JOIN animals AS a ON pa.pet_id = a.animal_id
+WHERE p.name = 'bessie'
+  AND NOT EXISTS (
+    SELECT 1
+    FROM people_animals AS pa2
+    WHERE pa2.pet_id = a.animal_id
+      AND pa2.owner_id <> p.person_id
+  );
+"""
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..f785801 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -19,27 +19,34 @@
 # vegetarian integer
 
 sql_create_favorite_foods = """
-
-Your SQL here.
-
+CREATE TABLE favorite_foods (
+  food_id integer PRIMARY KEY,
+  name text NOT NULL,
+  vegetarian integer NOT NULL
+);
 """
 
+
 # Part 5.B:
 # Alter the animals and people tables by adding a new column to each called 'favorite_food_id'
 # The test suite will verify the new changes by inserting some new rows. 
 
 sql_alter_tables_with_favorite_food = """
+ALTER TABLE animals
+ADD favorite_food_id integer;
 
-Your SQL here.
-
+ALTER TABLE people
+ADD favorite_food_id integer;
 """
 
+
 # Part 5.C:
 # Write a query to select all pets that are vegetarian.
 # THe output should be a list of tuples in the format: (<pet name>, <food name>)
 
 sql_select_all_vegetarian_pets = """
-
-Your SQL here.
-
+SELECT a.name AS pet_name, f.name AS food_name
+FROM animals AS a
+JOIN favorite_foods AS f ON a.favorite_food_id = f.food_id
+WHERE f.vegetarian = 1;
 """
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
index 61c1fdd..15aaaaa 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/Drink.java
@@ -1,7 +1,9 @@
 package org.velezreyes.quiz.question6;
 
 public interface Drink {
+
   public String getName();
 
   public boolean isFizzy();
+
 }
\ No newline at end of file
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..e3b394e 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,59 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+import java.util.HashMap;
+import java.util.Map;
 
-  public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+public class VendingMachineImpl implements VendingMachine {
+
+  private Map<String, Integer> drinks = new HashMap<>();
+  private int quarters = 0;
+  private static volatile VendingMachineImpl instance;
+
+  private VendingMachineImpl() {
+    drinks.put("ScottCola", 75);
+    drinks.put("KarenTea", 100);
+  }
+
+  public static VendingMachineImpl getInstance() {
+    if (instance == null) {
+      synchronized (VendingMachineImpl.class) {
+        if (instance == null) {
+          instance = new VendingMachineImpl();
+        }
+      }
+    }
+    return instance;
+  }
+
+  public void insertQuarter() {
+    quarters += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    Integer drinkPrice = drinks.get(name);
+    if (drinkPrice == null) {
+      throw new UnknownDrinkException();
+    }
+    if (quarters < drinkPrice) {
+      throw new NotEnoughMoneyException();
+    }
+
+    quarters -= drinkPrice;
+    return createDrink(name, drinkPrice);
+  }
+
+  private Drink createDrink(String name, int drinkPrice) {
+    return new Drink() {
+      @Override
+      public String getName() {
+        return name;
+      }
+
+      @Override
+      public boolean isFizzy() {
+        return "ScottCola".equals(name);
+      }
+    };
   }
 }
